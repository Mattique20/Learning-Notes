
## 3. MongoDB Basics (mongodb.md)

### Introduction

MongoDB is a NoSQL database. It stores data in flexible, JSON-like documents.  This makes it great for web applications.

### Installation and Setup

1.  **Download MongoDB Community Server:**  From the official MongoDB website ([https://www.mongodb.com/try/download/community](https://www.mongodb.com/try/download/community)).  Follow the installation instructions for your operating system.
2.  **Start MongoDB:**  The exact command depends on your OS, but it's usually something like `mongod` (the MongoDB daemon). You might need to specify a data directory (`--dbpath`).
3.  **MongoDB Shell:** Open a new terminal and type `mongo` (or `mongosh` for the newer shell). This connects you to the running MongoDB instance.

### Basic Concepts

*   **Databases:**  Containers for collections.
*   **Collections:**  Groups of related documents (like tables in SQL, but schema-less).
*   **Documents:**  JSON-like objects.  The basic unit of data.

```json
{
    "name": "John Doe",
    "age": 30,
    "city": "New York",
    "hobbies": ["reading", "hiking"]
}
```

###  MongoDB Shell (Basic CRUD)

*   **Show Databases:**
    ```bash
    show dbs
    ```

*   **Use a Database:**
    ```bash
    use mydatabase  # Switches to 'mydatabase'. Creates it if it doesn't exist.
    ```

*   **Show Collections:**
    ```bash
    show collections
    ```

*   **Create (Insert):**
    ```javascript
    // Insert one document
    db.users.insertOne({ name: "Alice", age: 25 });

    // Insert multiple documents
    db.users.insertMany([
        { name: "Bob", age: 30 },
        { name: "Charlie", age: 35 }
    ]);
    ```

*   **Read (Find):**
    ```javascript
    // Find all documents in the 'users' collection
    db.users.find();

    // Find documents with a specific condition
    db.users.find({ age: 30 }); // Find users with age 30
    db.users.find({ age: { $gt: 25 } });  // Find users with age greater than 25 ($gt = greater than)
    db.users.findOne({ name: "Alice" }); // Find the first document where name is "Alice"
    ```

*   **Update:**
    ```javascript
    // Update one document
    db.users.updateOne(
        { name: "Alice" }, // Filter: Find the document to update
        { $set: { age: 26 } }  // Update: Set the 'age' field to 26
    );
     // Update Many documents
     db.users.updateMany(
        { age: {$lt : 30} }, // Filter: Find the document to update
        { $set: { status: "young" } }  // Update: Set the 'age' field to 26
    );
    // Replace one
    db.users.replaceOne(
        { name: "Bob" }, // Find document with name equal "Bob"
        { name: "Robert", age: 31, city: "Los Angeles"} //New Document
    )
    ```

*   **Delete:**
    ```javascript
    // Delete one document
    db.users.deleteOne({ name: "Charlie" });
    // Delete many
    db.users.deleteMany({ status: "young" });
    ```

###  Query Operators

MongoDB has many operators for powerful queries.

*   **Comparison:** `$eq`, `$ne`, `$gt`, `$lt`, `$gte`, `$lte`, `$in`, `$nin`.
*   **Logical:** `$and`, `$or`, `$not`, `$nor`.
*   **Element:**  `$exists`, `$type`
*   **Array:** `$all`, `$elemMatch`, `$size`.

**Examples:**

```javascript
// Find users whose age is greater than or equal to 30 AND less than 40
db.users.find({ age: { $gte: 30, $lt: 40 } });

// Find users whose name is either "Alice" or "Bob"
db.users.find({ $or: [{ name: "Alice" }, { name: "Bob" }] });

// Find users who have a 'hobbies' array that contains both "reading" and "hiking"
db.users.find({ hobbies: { $all: ["reading", "hiking"] } });

// Find documents where the 'address' field exists
db.users.find({ address: { $exists: true } });
```

### Indexes

Indexes speed up queries.

```javascript
// Create an ascending index on the 'age' field
db.users.createIndex({ age: 1 });

// Create a descending index on the 'name' field
db.users.createIndex({ name: -1 });
```
Create indexes on fields that you frequently use in your queries.

### Mongoose (Node.js)

Mongoose is an Object Data Modeling (ODM) library for Node.js and MongoDB.  It makes working with MongoDB much easier.

1.  **Install:** `npm install mongoose`

2.  **Connect:**
    ```javascript
    const mongoose = require('mongoose');

    async function connect() {
        try {
            await mongoose.connect('mongodb://localhost:27017/mydatabase', {
              useNewUrlParser: true,
              useUnifiedTopology: true,
            });
            console.log('Connected to MongoDB');
        } catch (error) {
            console.error('Error connecting to MongoDB:', error);
        }
    }
    connect()
    ```

3.  **Schema and Model:**
    ```javascript
    // Define a schema
    const userSchema = new mongoose.Schema({
        name: { type: String, required: true }, // Name is a required string
        age: { type: Number, min: 18 },       // Age must be a number >= 18
        email: String,
        createdAt: { type: Date, default: Date.now } // Default value for createdAt
    });

    // Create a model
    const User = mongoose.model('User', userSchema); // 'User' is the name of the model (creates a 'users' collection)
    ```

4.  **CRUD with Mongoose:**
    ```javascript
    // Create a new user
    async function createUser() {
        const newUser = new User({
            name: "David",
            age: 40,
            email: "david@example.com"
        });

        try {
            const savedUser = await newUser.save(); // Save the user to the database
            console.log("User saved:", savedUser);
        } catch (error) {
            console.error("Error saving user:", error); // Handle validation errors, etc.
        }
    }
    createUser();

    // Find users
    async function findUsers() {
      try{
        const users = await User.find({ age: { $gt: 25 } }); // Find users older than 25
        console.log("Users:", users);

        const alice = await User.findOne({ name: "Alice" });
        console.log("Alice:", alice);
      } catch (error){
          console.log(error)
      }
    }
    findUsers();

    // Update a user
    async function updateUser() {
       try{
          const updatedUser = await User.findOneAndUpdate(
              { name: "David" },
              { $set: { email: "david.new@example.com" } },
              { new: true } // Return the updated document
          );
          console.log("Updated user:", updatedUser);
       } catch (error) {
          console.log(error)
       }
    }
    updateUser();

    // Delete a user
    async function deleteUser(){
        try {
            const deletedUser = await User.findOneAndDelete({ name: "David" });
            console.log("Deleted user:", deletedUser);
        } catch(error){
          console.log(error)
        }
    }
    deleteUser();
    ```
